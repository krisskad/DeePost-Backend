from django.db import models
from django.contrib.auth import get_user_model

from imagekit import ImageSpec, register
from imagekit.models import ImageSpecField
from imagekit.processors import ResizeToFill
from imagekit.utils import get_field_info
from taggit.managers import TaggableManager

User = get_user_model()

# Create your models here


class City(models.Model):
    name = models.CharField(max_length=140)

    def __str__(self):
        return str(self.name)

    class Meta:
        verbose_name_plural = "Cities"


class State(models.Model):
    city = models.ForeignKey(City, on_delete=models.PROTECT, editable=False)  # user_id
    name = models.CharField(max_length=140)

    def __str__(self):
        return str(self.name)

    class Meta:
        verbose_name_plural = "States"


class Country(models.Model):
    state = models.ForeignKey(State, on_delete=models.PROTECT, editable=False)  # user_id
    name = models.CharField(max_length=140)

    def __str__(self):
        return str(self.name)

    class Meta:
        verbose_name_plural = "Countries"


class PostType(models.Model):
    type = models.CharField(max_length=160) # video, audio, image, gif

    def __str__(self):
        return str(self.type)


class ImageThumbnail(ImageSpec):
    format = 'JPEG'
    options = {'quality': 60}

    @property
    def processors(self):
        model, field_name = get_field_info(self.source)
        return [ResizeToFill(model.thumbnail_width, model.thumbnail_height)]


register.generator('explorer_app:models:thumbnail_url', ImageThumbnail)


class PostImage(models.Model):
    # id = models.AutoField(primary_key=True)     # generated by default
    original_url = models.ImageField(upload_to='post_images/original/',
                                     width_field='original_width',
                                     height_field='original_height')  # BASE_DIR -> media -> post_images
    thumbnail_url = ImageSpecField(source='original_url',
                                   id='explorer_app:models:thumbnail_url')
    original_width = models.PositiveIntegerField(null=True, blank=True)
    original_height = models.PositiveIntegerField(null=True, blank=True)
    thumbnail_width = models.PositiveIntegerField(default=400)
    thumbnail_height = models.PositiveIntegerField(default=400)
    original_size = models.PositiveIntegerField(blank=True, null=True) # size in bytes
    original_format = models.CharField(max_length=50) # image format like jpeg, png
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name_plural = "Post Images"

    def __str__(self):
        return str(self.pk)


# Posts Model
class Post(models.Model):
    # id = models.AutoField(primary_key=True)     # generated by default
    user = models.ForeignKey(User, on_delete=models.PROTECT, editable=False, related_name='post')  # user_id
    image = models.ForeignKey(PostImage, on_delete=models.PROTECT,
                              editable=False, related_name='post_image',
                              blank=True, null=True)  # image id
    type = models.ForeignKey(PostType, on_delete=models.PROTECT,
                             editable=False, related_name='post_type')

    caption = models.CharField(max_length=140, blank=True, null=True)  # null == None, blank = ''
    tag = TaggableManager()
    total_likes = models.PositiveIntegerField(default=0)
    total_comments = models.PositiveIntegerField(default=0)
    total_downloads = models.PositiveIntegerField(default=0)
    total_views = models.PositiveIntegerField(editable=False, default=0)
    public = models.BooleanField(default=True)
    deleted = models.BooleanField(default=False)
    archived = models.BooleanField(default=False)
    on_instagram = models.BooleanField(default=False)
    on_facebook = models.BooleanField(default=False)
    on_linkedin = models.BooleanField(default=False)
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_on']

    def __str__(self):
        return str(self.pk)


# Comments Model
class Comment(models.Model):
    text = models.CharField(max_length=240)
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    commented_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.text


# Likes Model
class Like(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    liked_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.post.id)


# Followers Model
class Follow(models.Model):
    user = models.ForeignKey(User, related_name='user_following', on_delete=models.CASCADE, editable=False)
    followed = models.ForeignKey(User, related_name='user_followed', on_delete=models.CASCADE)
    is_followed = models.BooleanField(default=1)
    followed_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user} --> {self.followed}"


class SavedPost(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    saved_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.post.pk)

    class Meta:
        verbose_name_plural = "Saved Posts"


class ReportPost(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    reported_by = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    text = models.CharField(max_length=255)
    created_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.post.pk)



class ReportUser(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reported_user')
    reported_by = models.ForeignKey(User, on_delete=models.CASCADE, editable=False, related_name='reporter')
    text = models.CharField(max_length=255)
    created_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.user.pk)


class Download(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    downloaded_by = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.post.pk)


class Promotions(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    expired_on = models.DateTimeField()
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.post.pk)

    class Meta:
        verbose_name_plural = "Promotions"


class Advertisement(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    image = models.ImageField(upload_to='advertisement_images')  # BASE_DIR -> media -> post_images
    text = models.CharField(max_length=255)
    url = models.CharField(max_length=255)
    expired_on = models.DateTimeField()
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.user.pk)


class ContactedList(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_contacter')
    contacted_with = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_contacted')
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.user.pk)


class Message(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="sender")
    sent_to = models.ForeignKey(User, on_delete=models.CASCADE, related_name="receiver")
    text = models.TextField()
    deleted = models.BooleanField(default=0)
    created_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.text)
