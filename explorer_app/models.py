from django.db import models
from django.contrib.auth import get_user_model
User = get_user_model()

# Create your models here


class City(models.Model):
    city = models.CharField(max_length=255)

    def __str__(self):
        return str(self.city)


class State(models.Model):
    city = models.ForeignKey(City, on_delete=models.PROTECT, editable=False)  # user_id
    state = models.CharField(max_length=255)

    def __str__(self):
        return str(self.state)


class Country(models.Model):
    state = models.ForeignKey(State, on_delete=models.PROTECT, editable=False)  # user_id
    country = models.CharField(max_length=255)

    def __str__(self):
        return str(self.country)


class PostType(models.Model):
    type = models.CharField(max_length=160)

    def __str__(self):
        return str(self.type)


# Posts Model
class Post(models.Model):
    # id = models.AutoField(primary_key=True)     # generated by default
    user = models.ForeignKey(User, on_delete=models.PROTECT, editable=False)  # user_id
    caption = models.CharField(max_length=140, blank=True, null=True)  # null == None, blank = ''
    image = models.ImageField(upload_to='post_images')  # BASE_DIR -> media -> post_images
    type = models.ForeignKey(PostType, on_delete=models.PROTECT, editable=False)
    total_likes = models.IntegerField(default=0)
    total_comments = models.IntegerField(default=0)
    total_downloads = models.IntegerField(default=0)
    public = models.BooleanField()
    deleted = models.BooleanField()
    archived = models.BooleanField()
    on_instagram = models.BooleanField()
    on_facebook = models.BooleanField()
    on_linkedin = models.BooleanField()
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_on']

    def __str__(self):
        return str(self.pk)


# Comments Model
class Comment(models.Model):
    text = models.CharField(max_length=240)
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    commented_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.text


# Likes Model
class Like(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    liked_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.post.id)


# Followers Model
class Follow(models.Model):
    user = models.ForeignKey(User, related_name='user_following', on_delete=models.CASCADE, editable=False)
    followed = models.ForeignKey(User, related_name='user_followed', on_delete=models.CASCADE)
    is_followed = models.BooleanField(default=1)
    followed_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user} --> {self.followed}"


class SavedPost(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    saved_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.post.pk)


class ReportPost(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    reported_by = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    text = models.CharField(max_length=255)
    created_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.post.pk)


class ReportUser(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reported_user')
    reported_by = models.ForeignKey(User, on_delete=models.CASCADE, editable=False, related_name='reporter')
    text = models.CharField(max_length=255)
    created_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.user.pk)


class Download(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    downloaded_by = models.ForeignKey(User, on_delete=models.CASCADE, editable=False)
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.post.pk)


class Promotions(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    expired_on = models.DateTimeField()
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.post.pk)


class Advertisement(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    image = models.ImageField(upload_to='advertisement_images')  # BASE_DIR -> media -> post_images
    text = models.CharField(max_length=255)
    url = models.CharField(max_length=255)
    expired_on = models.DateTimeField()
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.user.pk)


class ContactedList(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_contacter')
    contacted_with = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_contacted')
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.user.pk)


class Message(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="sender")
    sent_to = models.ForeignKey(User, on_delete=models.CASCADE, related_name="receiver")
    text = models.TextField()
    deleted = models.BooleanField(default=0)
    created_on = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.text)
